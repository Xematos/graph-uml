digraph {
  subgraph cluster_0 {
    label = "Bartlett\\GraphUml\\Formatter"
    "Bartlett\\GraphUml\\Formatter\\AbstractFormatterFactory" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«abstract»<br/>AbstractFormatterFactory</b></td></tr>

    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left"># formatter</td></tr>
<tr><td align="left"># options</td></tr>
</table></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ __construct(options = )</td></tr>
<tr><td align="left">+ createInstance(options)</td></tr>
<tr><td align="left">+ «abstract» getFormatter()</td></tr>
<tr><td align="left">+ getType()</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\FormatterFactoryInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>FormatterFactoryInterface</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» createInstance(options)</td></tr>
<tr><td align="left">+ «abstract» getFormatter()</td></tr>
<tr><td align="left">+ «abstract» getType()</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\FormatterFactory" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>FormatterFactory</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ getFormatter()</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\AbstractFormatterFactory" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«abstract»<br/>AbstractFormatterFactory</b></td></tr>

    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left"># formatter</td></tr>
<tr><td align="left"># options</td></tr>
</table></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ __construct(options = )</td></tr>
<tr><td align="left">+ createInstance(options)</td></tr>
<tr><td align="left">+ «abstract» getFormatter()</td></tr>
<tr><td align="left">+ getType()</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\FormatterFactoryInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>FormatterFactoryInterface</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» createInstance(options)</td></tr>
<tr><td align="left">+ «abstract» getFormatter()</td></tr>
<tr><td align="left">+ «abstract» getType()</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\FormatterFactoryInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>FormatterFactoryInterface</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» createInstance(options)</td></tr>
<tr><td align="left">+ «abstract» getFormatter()</td></tr>
<tr><td align="left">+ «abstract» getType()</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\HtmlFormatter" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>HtmlFormatter</b></td></tr>
    <tr><td align="left">+ «static» DEFAULT_ROW_FORMAT : string = "&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;" {readOnly}</td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ __construct(options)</td></tr>
<tr><td align="left">+ getLabelExtension(reflection : ReflectionExtension)</td></tr>
<tr><td align="left">+ getLabelClass(reflection : ReflectionClass)</td></tr>
<tr><td align="left">+ getLabelConstants(reflection)</td></tr>
<tr><td align="left">+ getLabelProperties(reflection : ReflectionClass)</td></tr>
<tr><td align="left">+ getLabelFunctions(functions, class = )</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\AbstractFormatter" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«abstract»<br/>AbstractFormatter</b></td></tr>
    <tr><td align="left">+ «static» EOL : string = "
" {readOnly}</td></tr>

    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left"># options</td></tr>
</table></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ __construct(options)</td></tr>
<tr><td align="left"># getStereotype(reflection : ReflectionClass)</td></tr>
<tr><td align="left"># isVisible(reflection : Reflector)</td></tr>
<tr><td align="left"># getDocBlock(ref)</td></tr>
<tr><td align="left"># getDocBlockVar(ref)</td></tr>
<tr><td align="left"># getDocBlockReturn(ref)</td></tr>
<tr><td align="left"># getParameterType(parameter : ReflectionParameter)</td></tr>
<tr><td align="left"># getDocBlockMulti(ref, what)</td></tr>
<tr><td align="left"># getDocBlockSingle(ref, what)</td></tr>
<tr><td align="left"># getType(ret)</td></tr>
<tr><td align="left"># getCasted(value, quoted = )</td></tr>
<tr><td align="left"># visibility(ref : Reflector)</td></tr>
<tr><td align="left"># escape(id)</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\RecordFormatter" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>RecordFormatter</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ getLabelExtension(reflection : ReflectionExtension)</td></tr>
<tr><td align="left">+ getLabelClass(reflection : ReflectionClass)</td></tr>
<tr><td align="left">+ getLabelConstants(reflection)</td></tr>
<tr><td align="left">+ getLabelProperties(reflection : ReflectionClass)</td></tr>
<tr><td align="left">+ getLabelFunctions(functions, class = )</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\Formatter\\AbstractFormatter" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«abstract»<br/>AbstractFormatter</b></td></tr>
    <tr><td align="left">+ «static» EOL : string = "
" {readOnly}</td></tr>

    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left"># options</td></tr>
</table></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ __construct(options)</td></tr>
<tr><td align="left"># getStereotype(reflection : ReflectionClass)</td></tr>
<tr><td align="left"># isVisible(reflection : Reflector)</td></tr>
<tr><td align="left"># getDocBlock(ref)</td></tr>
<tr><td align="left"># getDocBlockVar(ref)</td></tr>
<tr><td align="left"># getDocBlockReturn(ref)</td></tr>
<tr><td align="left"># getParameterType(parameter : ReflectionParameter)</td></tr>
<tr><td align="left"># getDocBlockMulti(ref, what)</td></tr>
<tr><td align="left"># getDocBlockSingle(ref, what)</td></tr>
<tr><td align="left"># getType(ret)</td></tr>
<tr><td align="left"># getCasted(value, quoted = )</td></tr>
<tr><td align="left"># visibility(ref : Reflector)</td></tr>
<tr><td align="left"># escape(id)</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_1 {
    label = "Bartlett\\GraphUml"
    "Bartlett\\GraphUml\\FormatterInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>FormatterInterface</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» getLabelExtension(reflection : ReflectionExtension) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelClass(reflection : ReflectionClass) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelConstants(reflection : mixed) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelProperties(reflection : ReflectionClass) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelFunctions(functions : mixed, class : mixed = ) : string</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\FormatterInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>FormatterInterface</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» getLabelExtension(reflection : ReflectionExtension) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelClass(reflection : ReflectionClass) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelConstants(reflection : mixed) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelProperties(reflection : ReflectionClass) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelFunctions(functions : mixed, class : mixed = ) : string</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\FormatterInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>FormatterInterface</b></td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» getLabelExtension(reflection : ReflectionExtension) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelClass(reflection : ReflectionClass) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelConstants(reflection : mixed) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelProperties(reflection : ReflectionClass) : string</td></tr>
<tr><td align="left">+ «abstract» getLabelFunctions(functions : mixed, class : mixed = ) : string</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\ClassDiagramBuilder" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>ClassDiagramBuilder</b></td></tr>
    <tr><td align="left">+ «static» OPTIONS_DEFAULTS : array = […] {readOnly}</td></tr>

    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">– graph : Graph</td></tr>
<tr><td align="left">– options : array</td></tr>
<tr><td align="left">– formatterFactory : FormatterFactory</td></tr>
</table></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ __construct(graph : Graphp\\Graph\\Graph, options : array = )</td></tr>
<tr><td align="left">+ createVertexClass(class : mixed) : Vertex</td></tr>
<tr><td align="left">+ createVertexExtension(extension : mixed) : Vertex</td></tr>
<tr><td align="left">– getInterfaces(reflection : ReflectionClass)</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\ClassDiagramBuilderInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>ClassDiagramBuilderInterface</b></td></tr>
    <tr><td align="left">+ «static» OPTIONS_DEFAULTS : array = […] {readOnly}</td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» createVertexClass(class)</td></tr>
<tr><td align="left">+ «abstract» createVertexExtension(extension)</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\GraphUml\\ClassDiagramBuilderInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>ClassDiagramBuilderInterface</b></td></tr>
    <tr><td align="left">+ «static» OPTIONS_DEFAULTS : array = […] {readOnly}</td></tr>

    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
<tr><td align="left">+ «abstract» createVertexClass(class)</td></tr>
<tr><td align="left">+ «abstract» createVertexExtension(extension)</td></tr>
</table></td></tr>
</table>>]
  }
  "Bartlett\\GraphUml\\Formatter\\AbstractFormatterFactory" -> "Bartlett\\GraphUml\\Formatter\\FormatterFactoryInterface" [arrowhead="empty" style="dashed"]
  "Bartlett\\GraphUml\\Formatter\\AbstractFormatterFactory" -> "Bartlett\\GraphUml\\Formatter\\FormatterFactoryInterface" [arrowhead="empty" style="dashed"]
  "Bartlett\\GraphUml\\Formatter\\FormatterFactory" -> "Bartlett\\GraphUml\\Formatter\\AbstractFormatterFactory" [arrowhead="empty"]
  "Bartlett\\GraphUml\\Formatter\\HtmlFormatter" -> "Bartlett\\GraphUml\\Formatter\\AbstractFormatter" [arrowhead="empty"]
  "Bartlett\\GraphUml\\Formatter\\HtmlFormatter" -> "Bartlett\\GraphUml\\FormatterInterface" [arrowhead="empty" style="dashed"]
  "Bartlett\\GraphUml\\Formatter\\RecordFormatter" -> "Bartlett\\GraphUml\\Formatter\\AbstractFormatter" [arrowhead="empty"]
  "Bartlett\\GraphUml\\Formatter\\RecordFormatter" -> "Bartlett\\GraphUml\\FormatterInterface" [arrowhead="empty" style="dashed"]
  "Bartlett\\GraphUml\\ClassDiagramBuilder" -> "Bartlett\\GraphUml\\ClassDiagramBuilderInterface" [arrowhead="empty" style="dashed"]
}
